[
  {
    "number": 56,
    "title": "FEATURE: Admins should be able to visit any play page \"as if\" they were that user (maybe read only?)",
    "body": "# User Story\r\n\r\n* As an admin\r\n* I can see what any players page would look like\r\n* So that I can better understand how the game is playing out.\r\n\r\n# Discussion\r\n\r\nIt would be nice if the admin could \"drop in\" on the play page of any player in the game, and see their play page \"as if\" they were that user.\r\n\r\nIt might be better if this were in some kind of \"read only\" mode, where they can see all of the data \"as if\" they were that user, but they can't buy/sell cows on behalf of that user.\r\n\r\nBut it's ok to implement it so that the admin *can* do those things if that's easier.\r\n\r\n# Consider a Spike\r\n\r\nNote that this issue is one of those that might be dead simple, or really really complex, and it's difficult to know up front.  You may need to do what's called a \"spike\" where you do a practice run on trying to build it in a Draft PR that is not intended to be merged, but functions as a kind of \"first draft\" where you try out ideas.  \r\n\r\nIn a spike, since it's not intended as code to be merged, you can cut corners; e.g. \r\n* you can leave in all of the `console.log()` and/or `log.info()` statements you like\r\n* you can have commented out code all over the place\r\n* you don't have to worry about testing or test coverage\r\n* it's ok if the user interface is a little messy\r\n\r\nYou just try out your plan for implementing the feature to see if your plan is feasible.  If it seems to be feasible, then you make a new branch and a new PR, doing everything \"the right way\", using the spike as a \"cheat sheet\".\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] When an admin views the Leaderboard there is an extra button called \"Play Page\"\r\n- [ ] This button does not show up on the Leaderboard for any user that is not an Admin\r\n- [ ] When the admin clicks that button, they are taken to the url `/admin/play/:userCommonsId`\r\n- [ ] What they see is the PlayPage, but they see it \"as if\" they were the user associated with that userCommonsId.\r\n        This may require some significant refactoring of the PlayPage and how it communicates with the backend!\r\n- [ ] The functioning of the PlayPage for regular users is unaffected by these changes.\r\n- [ ] When an admin is viewing the PlayPage \"as if\" they were that user, there is some visual indication (e.g. a banner at the top of the page) indicating that they are using their admin features to visit another players page. That banner might include: Name of Commons, Name of User, User id, User Email.\r\n\r\n",
    "labels": "M23"
  },
  {
    "number": 55,
    "title": "FEATURE: Add a back button on the leaderboard",
    "body": "# User Story\r\n\r\n* As a user\r\n* I can click a back button on the leaderboard\r\n* So that I can navigate the app more easily.\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] There is a back button on the leaderboard\r\n- [ ] When you click it, it takes you back to where you were\r\n\r\n### Implementation Todos\r\n\r\nHint: look at the cancel button on the edit page in team03 for how to implement a back button.",
    "labels": "good first issue,M23"
  },
  {
    "number": 54,
    "title": "BUG: Milk at 4am PST or GMT?",
    "body": "### Summary\r\n\r\nThe text on the website says the cows are milked at 4am.\r\n\r\nHowever, the cron expressions in the `ScheduledJobs` class are, by default, expressed in Zulu time (i.e. Coordinated Universal Time, aka Greenwich Mean Time).\r\n\r\nWe would prefer that to be in local time.  \r\n\r\n### Expected Behavior\r\n\r\nIt should be 4am local time\r\n\r\n### Current / Observed Behavior\r\n\r\nIt isn't \r\n\r\n### Steps to Reproduce\r\n\r\nLook at the logs to see when the job actually ran.\r\n\r\n### Implementation Notes\r\n\r\nAs explained [here](https://www.baeldung.com/spring-scheduled-tasks#schedule-a-task-using-cron-expressions) it's possible to include a timezone in the `@Scheduled` annotations.   The example given is:\r\n\r\n```\r\n@Scheduled(cron = \"0 15 10 15 * ?\", zone = \"Europe/Paris\")\r\n```\r\n\r\nThe zone we want is this one: `America/Los_Angeles`\r\n\r\nhttp://www.timezoneconverter.com/cgi-bin/zoneinfo?tz=America/Los_Angeles\r\n\r\nIt's ok to hard code it for now.  If we ever need to support another timezone, we can make this a configuration variable like the cron expressions are.\r\n\r\n# To test\r\n\r\nCheck the logs for the scheduled jobs and see when they run.  If necessary, you can override the default schedule with configuration variables.  See the `src/main/resources/application.properties` file where you'll find expressions like these:\r\n\r\n```\r\napp.updateCowHealth.cron=${UPDATE_COW_HEALTH_CRON:${env.UPDATE_COW_HEALTH_CRON:0 0 0,12 * * *}}\r\napp.milkTheCows.cron=${MILK_THE_COWS_CRON:${env.MILK_THE_COWS_CRON:0 0 4 * * *}}\r\n```\r\n\r\nand the corresponding entries in `src/main/resources/application-development.properties`\r\n\r\n```\r\napp.updateCowHealth.cron=${UPDATE_COW_HEALTH_CRON:${env.UPDATE_COW_HEALTH_CRON:0 */7 * * * *}}\r\napp.milkTheCows.cron=${MILK_THE_COWS_CRON:${env.MILK_THE_COWS_CRON:0 */13 * * * *}}\r\n```\r\n\r\nFor an explanation of the syntax `0 */13 * * * *` or `0 0 0,12 * * *` see \r\nhttps://spring.io/blog/2020/11/10/new-in-spring-5-3-improved-cron-expressions",
    "labels": "bug,good first issue,M23"
  },
  {
    "number": 52,
    "title": "FEATURE: Add ability to milk the cows on demand for just a particular commons",
    "body": "# User Story\r\n\r\n* As an admin\r\n* I can milk the cows (or update health) on demand for just a single commons.\r\n* So that I have more control over individual games\r\n\r\n### Discussion\r\n\r\nCurrently on the Admin/Jobs page  the admin can choose a specific commons when:\r\n* setting cow health to a specific value\r\n* requesting an instructor report \r\n\r\nHowever, the jobs to milk the cows and update cow health (note: different from \"setting\" cow health) can only be run for all commons, or none at all.\r\n\r\nIt would be nice, building on the functionality for \"set cow health\" and \"instructor job (specfic commons) to be able to specify a commons, or \"all\", when running the \"update cow health\" and \"milk the cows\" jobs.\r\n\r\nHowever, this has to be done carefully, since the automated job that updates cow health and milk cows on a schedule needs to still work on all commons; so it's not ok to make the commonsId parameter required, and take away the ability to update health for all commons, or milk all cows.  That needs to be retained. \r\n\r\n### Acceptance Criteria\r\n\r\n(Note this issue could be broken into multiple issues/PRs)\r\n\r\n- [ ] Either: the backend endpoint that launches the job to milk the cows can take an **optional ** parameter specifying a particular commonsId (if not specified, then the job is run for all commons).  OR there is a separate endpoint for milking cows for a particular commons.\r\n- [ ] Either: the backend endpoint that launches the job to update cow health can take an **optional ** parameter specifying a particular commonsId (if not specified, then the job is run for all commons).  OR there is a separate endpoint for updating cow health for a particular commons.\r\n- [ ] There is a way on the jobs page to specify a commons when submitting the milk the cows job.  This can be a selector similar to the one on the page for setting the health of all cows for a particular commons, except that in addition to an option for each commons, at the top there is an option \"ALL\" which specifies that the cows should be milked for all commons.   OR there are separate section on the jobs page for Milking Cows (specific commons) and milking cows (all commons). This is an implementer choice.\r\n- [ ] There is a way on the jobs page to specify a commons when submitting the update cow health job.  This can be a selector similar to the one on the page for setting the health of all cows for a particular commons, except that in addition to an option for each commons, at the top there is an option \"ALL\" which specifies that the cows should be milked for all commons.   OR there are separate section on the jobs page for Update Cow Health (specific commons) and Update Cow Health (all commons). This is an implementer choice.\r\n\r\n",
    "labels": "M23"
  },
  {
    "number": 51,
    "title": "FEATURE: Add caution before deleting Commons",
    "body": "# User Story\r\n\r\n* As an admin\r\n* I can see a \"are you sure\" popup when deleting a commons\r\n* So that I don't accidentally delete an entire game in progress\r\n\r\n### Discussion\r\n\r\nCurrently, the Delete button on the commons page is a little dangerous.\r\n\r\nIf you click it, an entire commons goes away, with no confirmation dialog.\r\n\r\nIt would be better to add a modal (i.e. a popup) that asks the user: Are you sure you want to delete this commons?\r\n\r\nThe modal would have options such as [Permanently Delete] and [Keep this Commons].\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] If you click Delete on a commons, you get a modal, and the commons is not immediately deleted.\r\n- [ ] When you get the modal, if you click the [Keep this Commons] button, you are returned to the commons list page, and nothing is deleted\r\n- [ ] When you get the modal, if you click the [Delete this Commons] button, the commons is deleted.\r\n\r\n### Implementation Todos\r\n\r\nAn explanation of React Bootstrap modals can be found here: https://react-bootstrap.netlify.app/docs/components/modal/",
    "labels": "M23"
  },
  {
    "number": 49,
    "title": "FEATURE: Better Profits Display",
    "body": "## User Story\r\n\r\n* As a player\r\n* I can see both my most recent profits, as well as full profit history, easily \r\n* I can better understand what's happening in the game\r\n\r\n## Discussion\r\n\r\nThe profits table currently shows ALL profits from milking the cows during the game, which can result in a kind of sloppy user experience, since this table can go on for many more rows that the page design can accomodate.\r\n\r\nWhat we want is to page the profits table in a similar way to how the jobs table is currently paged.\r\n\r\nYou could use the `PagedJobsTable` as a model.\r\n\r\nWhat we want is for the user to be able to see the most recent profits at a glance on the main user commons page (for example, perhaps the \"n\" most recent records, where \"n\" is a constant defined in the page component, e.g. `const PROFIT_PAGE_SIZE=5`. )  \r\n\r\nA paged backend endpoint for profits could be added at \r\n```\r\n/api/profits/paged/commonsid?commonsId=1&page=0&size=5\r\n```\r\n\r\nThen components to go forward and backwards through the pages can be added.\r\n\r\nNote that the buttons in `PagedJobsTable` were a quick attempt at building an MVP, but since then\r\nwe've discovered that React Bootstrap has components just for this purpose: see https://react-bootstrap.netlify.app/docs/components/pagination\r\n\r\nYou are encouraged to use those.\r\n\r\n## Acceptance Criteria\r\n\r\n- [ ] There is a new backend endpoint for paged retrieval of profits at `/api/profits/paged/commonsid?commonsId=1&page=0&size=5` (suggest making this it's own issue/PR).\r\n- [ ] The play page initially shows only the first page of profits, e.g. only the most recent `n` profits where `n` is a constant defined in the code for the play page (e.g. `const PROFIT_PAGE_SIZE=5.)\r\n- [ ] The Profits section of the page has page controls to go through profits from earlier.\r\n- [ ] It is easy for the user to navigate through their profits and the user interface looks clean.\r\n\r\n",
    "labels": "M23"
  },
  {
    "number": 48,
    "title": "FEATURE: Eliminate purchase notification popups",
    "body": "# User Story\r\n\r\n* As a User (especially mobile)\r\n* I can Buy cows without seeing toast message pop up.\r\n* So that I can buy cows more easily\r\n\r\n### Discussion\r\n\r\nRight now when buying many cows by spam-clicking, the screen floods with times \"Cow bought!\" popups:\r\n\r\n<img width=\"418\" alt=\"image\" src=\"https://github.com/ucsb-cs156/proj-happycows/assets/1119017/0049d9c0-c983-47bb-933a-2fcf916a28bc\">\r\n\r\n\r\n\r\nThis is especially distracting on mobile, as the popups block the interface and buttons.\r\n\r\nThese toast message aren't adding any value for the user, so we should just eliminate them in the case where the\r\ncow purchase was successful.  The messages may still be useful if/when there is an error condition, but if the purchase\r\nis successful, it will be reflected in the cow count and dollar amounts on the screen.\r\n\r\n(The toast message is a leftover feature from before those numbers were being reliably displayed and updated... it was useful at the time, but isn't anymore.)\r\n\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] No Toast message is generated when purchasing cows.\r\n\r\n",
    "labels": "good first issue,M23"
  },
  {
    "number": 47,
    "title": "FEATURE: Wealth on Leaderboard should display as currency",
    "body": "# User Story\r\n\r\n* As a Users\r\n* I can See a formatted dollar amount for the wealth on the leaderboard\r\n* So that I can better understand the relative wealth of farmers in the game\r\n\r\n### Discussion\r\n\r\nCurrently the wealth of farmers is displayed like this on the leaderboard:\r\n\r\n<img width=\"1285\" alt=\"image\" src=\"https://github.com/ucsb-cs156/proj-happycows/assets/1119017/f6f1f031-2cdf-43de-9475-91ff9d32ec93\">\r\n\r\nInstead, we'd like something more like this:\r\n\r\n<img width=\"1288\" alt=\"image\" src=\"https://github.com/ucsb-cs156/proj-happycows/assets/1119017/41171a9d-741a-4ac9-8d2b-257a1cac021a\">\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] Wealth on leaderboard is displayed as currency\r\n\r\n### Implementation Todos\r\n\r\nShould be a change to the react component that renders the leaderboard.",
    "labels": "good first issue,M23"
  },
  {
    "number": 42,
    "title": "FEATURE: As an admin, I can control dates for game play",
    "body": "# User Story\r\n* As an admin\r\n* I can control dates for game play\r\n* So that the server doesn't accumulate database records that are useless and eventually crash\r\n\r\n# Discussion\r\n\r\nThere is currently a start date associated with each commons.  In this issue we are just adding an end date \r\nfor the game.   We'll use that end date in many ways in future issues (see \"Future Issues\" below), but in this issue we are just adding it.\r\n\r\nThis PR may be useful as a reference; it was not merged into the main code base yet, but outlines what needs to be done:\r\n\r\n* <https://github.com/ucsb-cs156-s23/proj-happycows-s23-6pm-3/pull/59>\r\n\r\nNote: don't just blindly copy/paste code from this; some of it is relevant, and some of it may not be.  But it can be a useful reference.\r\n\r\n# Future Issues\r\n\r\nOnce this issue is done, it opens up the possibility of these: \r\n\r\n1. For the automatic jobs that manipulate cow health, milk the cows, etc.  we should restrict which commons these are done on to only the commons that have games in progress.    There is no reason to milk cows, update health, produce instructor reports etc.  for a game that's already over.  It's important that these activities STOP at some point, or else we'll be filling up the database with useless rows indefinitely.  That's how you crash a server.  \r\n\r\n2. A clean start/end date will likely make future graphs and visualizations easier to make. \r\n\r\n3. We may want to restrict users from joining a commons before the game start date so that the instructor can set things up in advance, but students all start at the same time. \r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] Add lastday date. (this is more clear than end date, since it indicates that the game ends at 11:59:59 on that day).  Needs to be added to entity in backend, POST and PUT endpoints in backend, form in frontend, and adjusted on Create and Update pages.\r\n- [ ] Add a function to the Commons entity (and tests for it) called gameInProgress() that returns true if today's date is >= start date, and <= end date.  This could be it's own PR, with tests.  Note that mocking \"today's date\" is possible; tricky, but possible.\r\n\r\n# Acceptance Criteria for Future Issues:\r\n\r\n- [ ] Add logic to the backends of various jobs that operate on all commons (MilkTheCows, UpdateCowHealth, InstructorReports) where it iterates over the commons.  Skip over commons where gameInProgress() returns false.  You can find some code for this in a PR that was not merged from S23, here: \r\n- [ ] If instructor requests a job be run on a *specific* commons, it should run even if the game is not in progress.\r\n\r\n",
    "labels": "M23"
  },
  {
    "number": 41,
    "title": "UX FIX: Make fields narrower on Create Commons Form",
    "body": "\r\n# User Story\r\n\r\n* As an admin or developer\r\n* I can create/edit a new commons more easily\r\n* So that I am less annoyed\r\n\r\n### Discussion\r\n\r\nThe form used on the CreateCommons Page and the Edit Commons page could use some UI tweaks.\r\n\r\nCurrently the size of the fields scales with the page as it grows and shrinks.  But all of the fields are pretty short (numbers); that space is just wasted.  It might be more reasonable to set a fixed width in characters or pixels, since the maximum size needed would pretty much fit on even the tiniest screens.\r\n\r\nThe date field is particularly annoying, since the date picker is all the way at the right, so you have to move the mouse a long way to reach it.\r\n\r\n<img width=\"749\" alt=\"image\" src=\"https://github.com/ucsb-cs156/proj-happycows/assets/1119017/57847e7d-76b5-4a36-aebc-4ec45a82a181\">\r\n\r\nDefault values on the create form, and/or suggested values (or advice on picking a value, brief explanation of what the values mean) might also be helpful.\r\n\r\nI suggest looking at the various ways of doing layout available in React Bootstrap (such as `Row` and `Col`;  see links below) and reorganizing the page for convenience:\r\n\r\n* https://react-bootstrap.netlify.app/docs/layout/grid\r\n* https://react-bootstrap.netlify.app/docs/forms/overview\r\n\r\nYou can also include default values as was done by the s23-6pm-3 team---visit their Create Commons page and see what they did:\r\n\r\nhttps://proj-happycows-s23-6pm-3.dokku-12.cs.ucsb.edu/\r\n\r\nThis is what it looks like when you first load the form; notice how default values are suggested:\r\n\r\n<img width=\"477\" alt=\"image\" src=\"https://github.com/ucsb-cs156/proj-happycows/assets/1119017/7d9ff8ac-b51e-454e-a438-56cfc9036ee7\">\r\n\r\nHere's what the code looks like for that; notice the various uses of  code such as `defaultValue={10000}`\r\n\r\n* <https://github.com/ucsb-cs156-s23/proj-happycows-s23-6pm-3/blob/main/frontend/src/main/components/Commons/CommonsForm.js>\r\n\r\nOne thing that would be nicer is if these default values were all organized, for example, in an object at the \r\ntop of the file, something like:\r\n\r\n```js\r\nconst defaultValues = {\r\n  startingBalance: 10000,\r\n  cowPrice: 100,\r\n  milkPrice: 20,\r\n  // etc...\r\n} \r\n```\r\n\r\nAnd then each default value was something like: \r\n* `defaultValue={defaultValues.startingBalance}` instead of `defaultValue={10000}`\r\n* `defaultValue={defaultValues.cowPrice}` instead of `defaultValue={100}`\r\n* etc...\r\n\r\n### Acceptance Criteria\r\n\r\n- [ ] The field widths have been adjusted in a way that makes the form more usable.\r\n- [ ] The date field, in particular, has been adjusted so that the place you click is not so far to the right\r\n- [ ] There are suitable default values when you are creating a commons.\r\n- [ ] The default value are organized into an easy to read object near the top of the `CommonsForm.js` file.\r\n\r\nOptional but helpful:\r\n- [ ] The start date defaults to today's date\r\n- [ ] The end date defaults to today's date plus 30 days\r\n- [ ] There are explanations (in small font near the field, or in \"tooltips\" that come up when you hover over a field).\r\n\r\n\r\n\r\n",
    "labels": "M23"
  },
  {
    "number": 36,
    "title": "EPIC: Commons Chat",
    "body": "# Feature Summary \r\n\r\nThe aim is to have a chat box on the user commons page so that admin and users can send messages between each other.\r\n\r\n# Discussion\r\n\r\nThis is a big feature, so it should be broken up into multiple issues; the list below is one suggestion.\r\n\r\nRemember \"minimum viable product\"; the first iteration of this would be a single chat room for each Commons, without DM features; just a global chat where everyone sees everything.   \r\n\r\nThe list below mentions \"hiding\" messages (rather than deleting them).  That's not part of MVP, so make sure that all of the MVP features get done first.  However, I do suggest including the `private boolean hidden;` field in the entity even in the first iteration; database changes later are much more disruptive (since we don't have a good database migration strategy yet), so it's better to include all of the fields you might need in the initial run.\r\n\r\nTo that end, we might also include these fields in the entity:\r\n\r\n`private boolean dm;`\r\n`private Long toUserId`\r\n\r\nThe `dm` field would initially always be false, and the toUserId field would be `null`; we'll use those fields later when/if we implement DMs (but that will be a separate Epic.)\r\n\r\n# Implementation Todos\r\n\r\nHere is one way to break this up.  Note that each of the headings below could be a single issue/PR or it could be broken down further into multiple issues/PRs; smaller issues/PRs are easier to code review / merge and tend to earn more points!\r\n\r\n##  CRUD backend for messages MVP\r\n\r\n- [ ] There is an entity/repository for a ChatMessage.  A ChatMessage should have an id, userId, commonsId and a message payload.   You can use the `@CreationTimestamp` technique to automatically get a timestamp on the message. \r\n- [ ] Include these fields for future use:\r\n       `private boolean hidden;`\r\n       `private Long toUserId`\r\n- [ ] The entity/repository for a ChatMessage should also have a \"hidden\" field that is initially false.  (This is because rather than deleting messages, we want to just \"mark them as hidden\".   This is to prevent users from using the chat to harass other users by sending inappropriate messages and then deleting them; messages marked as hidden remain in the database (so that they can be retained as evidence) but are not shown.   \r\n- [ ] There is a backend POST endpoint `/api/chat/post` where any user can create a message for a particular commonsId, provided they are a member of that commons.  If they have not joined that commons, that should be a 403 error.  The `hidden` field is initially `false`.   The endpoint should take these parameters: `commonsId` and `content`.   The userId should be determined automatically from the currentUser service on the backend, and should not be passed as a parameter. The `dm` field should always be set to `false` right now, and the `toUserId` set to null.\r\n- [ ] There is a backend endpoint `/api/chat/get` that takes a commonsId as a param, for retrieving chat messages for a particular commons that operates similar to the backend endpoint for jobs, in that it is paged, and sorted.   The endpoint should retrieve the most recent messages first, and should exclude any \"hidden\" messages.  It should retrieve messages for a particular commons only if the user is a member of that commons, or the user is an admin, otherwise it should return a 403\r\n\r\n##  CRUD backend for messages \"nice to have\" features (not MVP; work on these ONLY after all front and backend MVP features are done!)\r\n\r\n- [ ] There is a backend PUT endpoint `/api/chat/hide` with param `id` where any user can \"hide\" any of their own  messages; however the message should not be permanently deleted, but rather just \"marked as hidden\" by setting `hidden` to true.   The endpoint should return 403 if (the message doesn't belong to the user AND the user is not an admin). If the opposite of that is true, i.e. (message belongs to user OR user is an admin), then the message will be marked as `hidden`.  This should also invalidate the React Query cache for `/api/chat/get` and force a refresh of the chat window.\r\n- [ ] There is a backend endpoint `/api/chat/admin/hidden` (param commonsId) for the Admin only that retrieves all hidden messages for a given commons (paged).\r\n- [ ] There is a backend endpoint `/api/chat/admin/get` (param commonsId) for the Admin that retrieves all messages for a given commons *including* hidden ones (paged).  \r\n\r\n##  Frontend `ChatDisplay` Component (MVP)\r\n\r\n\r\n- [ ] There is a `chatMessageFixtures.js` that matches the output of the  `/api/chat/get` endpoint.  If that endpoint already exists, use actual data from Swagger; if not, make a best effort guess as to what it will look like, and communicate with the person working on the backend implementation of CRUD operations for chat messages.\r\n- [ ] There is a chat window component `ChatDisplay`  that displays chat messages retrieved from the backend endpoint; that is its only job.\r\n- [ ] The commonsId should be passed into the `ChatMessageCreate` as a prop, since any given `ChatDisplay` will be embedded in the context of a single `Commons`\r\n- [ ] The chat messages displayed should include the date/time of the message, the user id (probably as the full name of the user and the numeric userid in parens, e.g. `Phill Conrad (17)` or `Phillip Conrad (23)`) and the message content.   There is no need to display the `id` field from the message table or the `hidden` field.  You may find it useful to create a separate `ChatMessageDisplay` component that displays a single message using a React Bootstrap [`Card`](https://react-bootstrap.netlify.app/docs/components/cards); the main panel of the `ChatDisplay` would then be a [`Stack`](https://react-bootstrap.netlify.app/docs/layout/stack/) of `ChatMessageDisplay` components.  Or you could use `OurTable`; this is an implementer decision.\r\n- [ ] The `ChatDisplay`   component should be wide, but short; the idea is that you could put it at the very top, or very bottom of the Play page (the user commons page) and still leave plenty of room for other parts of that page. So it can use the entire page width, but should use as little vertical space as possible.\r\n- [ ] For this issue, we don't necessarily need a frontend component to *create* the messages yet; that can come later.  Build this with the assumption that while you are building it, you can test it by entering messages manually in the swagger POST endpoint.   However, assume that a `ChatMessageCreate` component will go stacked on top of, or immediately underneath, this component.\r\n- [ ] The chat window component either takes a list of messages as a prop (this is easier for testing if the backend isn't ready yet), or it might directly query the backend endpoint for the commons (like the PagedJobsTable does).  This is an implementation decision.   It could also be that a first version take messages though a prop, and a later version integrates directly with the backend.\r\n- [ ] Messages in the chat window are displayed with the least recent message on top, and the most recent message on bottom.\r\n- [ ] By default, only the most recent n messages are loaded, where n is at least 5, but could be 10 or 20; whatever it is, it should be defined as a constant somewhere in the component, e.g. `const initialMessagePageSize = 10` and then that value should be used everywhere by the name `initialMessagePageSize` (i.e. it should be possible to change the initial message page size by changing just that one number.)\r\n- [ ] Messages have a scroll bar when the content of the most recent n messages is too big to fit in the window.\r\n- [ ] In a first PR, it's ok if this is only displayed in the Storybook.  Integrating it into the page can come later when all of the separate parts are ready.\r\n- [ ] The chat message window should retrieve new messages with some frequency that is defined as a variable in the component (e.g. every 2000 ms).\r\n\r\n##  Frontend Chat Display Component (not MVP; work on these ONLY after all front and backend MVP features are done!)\r\n\r\n- [ ] There is also a button at the top of the when there are more pages of messages \"load more messages\".  Unlike the PagedJobsTable, instead of showing one page at a time, it works more like \"infinite scroll\"; each time you click \"more messages\", another page of messages from the past is loaded, until you reach the earliest message, at which point the \"load more messages\" button is disabled, and the label text changes to \"No more messages\".\r\n- [ ]  For each message, if that message belongs to the logged in user, or if the user is an admin, there is a small discrete \"hide\" button somewhere in each message that will invoke the `/api/chat/hide`  endpoint.\r\n\r\n##  Frontend `ChatMessageCreate` component (MVP)\r\n\r\n- [ ] There is a `ChatMessageCreate` component that can create a new chat message and post it to the  `/api/chat/post`  endpoint.    The only information you need from the user is the message content, but you will need a `<Form>` for that.   It should not be necessary to pass the userId, since the backend already knows the userId, but you will need to pass the commonsId; the commonsId should be passed into the `ChatMessageCreate` as a prop.\r\n- [ ] The `ChatMessageCreate` component should be the same width as the `ChatDisplay` so that we can create a `ChatPanel` that consists of the `ChatMessageCreate` and `ChatDisplay` components stacked on top of each other. (See: <https://react-bootstrap.netlify.app/docs/layout/stack/>)\r\n        \r\n##  Frontend `ChatPanel` component (MVP)\r\n\r\n- [ ] There is a `ChatPanel` component that takes a prop `commonsId` and passes that prop down to its two children, `ChatMessageCreate` and `ChatDisplay`\r\n- [ ] The `ChatPanel` incorporates a vertical [`Stack`](https://react-bootstrap.netlify.app/docs/layout/stack/) of `ChatMessageCreate` and `ChatDisplay`\r\n- [ ] There is a storybook entry for `ChatPanel`\r\n\r\n##  Frontend `ChatPanel` component incorporated into Play Page (final MVP issue)\r\n\r\nThis depends on all of the MVP issues above being finished.\r\n\r\nYour job is to incorporate the working ChatPanel into the PlayPage so that users can start to chat with one another.\r\n\r\n\r\n\r\n\r\n",
    "labels": "M23"
  }
]
